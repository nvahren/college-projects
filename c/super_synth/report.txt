Christopher Ray
Nathan Vahrenberg

Douglas Thain
CSE 20211
10 December 2013


COMPILE COMMAND:

We turned in a Makefile with the project, so simply typing "make" should 
compile the program.  However, if that does not work, the actual command is

gcc super_synth.c music_functions.c wavfile.c -o super_synth -lm


SAMPLE EXECUTION COMMAND:

./super_synth techDemo.music techTest.wav


SEE MANUAL.txt FOR INSTRUCTIONS ON HOW TO USE THE PROGRAM.


	The program "super_synth.c" is an expansion of Lab 8's "synth.c" that 
maintains the basic function of reading user inputs and generating a .wav file
containing the user's song while adding several new features.  In addition to 
being able to input notes, tempo changes, and octave changes, users are now 
able to input chords of up to 5 notes as well as change the current instrument
being used.  Unlike "synth.c," users no longer have the option to 
individually input characters through the command line.  They instead have to 
place all inputs in a separate .music file.  However, users can now rename
the .wav file being generated by altering the 3rd string in the execution
command.       
	Internally, consists primarily of a while loop and switch statement 
containing several calls to functions housed in the files "music_functions.c,"
"music_functions.h," "wavfile.c," and "wavfile.h."  When the program is 
executed, it first opens the input file as well as .wav file to be written.  
If either file fails to open the program will print an error message and 
immediately end.  The program then begins read from the input file and will 
continue to do so until it reaches an 'X,' which indicates the end of a song, 
or the end of the file.  As the program is reading from the input file it will
make a call to 1 of 5 functions:  a function for adding a note to the song,
a function for changing the tempo, a function for changing the octave, a 
function for changing the instrument, or a function for inputting a chord.
The function for inputting a chord works by creating a 2-dimensional array to
contain the waveforms of up to 5 notes and averaging the values of those 
waveforms to create a new chord waveform to be written to the .wav file.  The
function for changing instruments works by reading the 4 characters housed in 
brackets as a string.  That string is then compared to 5 other strings to 
determine the value of the variable "instrument."  That variable is then 
passed on to any functions that write to the .wav file to determine which 
waveform equation is used.
	We verified the program's output by first running it with the .music files 
given in Lab 8 to see whether or not it could successfully generate a .wav 
file.  After we saw that it was able to do so, we then wrote the file
"techDemo.music" that tested the program's ability to change instruments, 
the program's ability to generate chords using the different instruments, the
octave range of all of the instruments, the program's ability to generate 
chords composed of multiple instruments, and the program's ability to create
a full 5 note chord.  We knew the program's output was correct once we were
able to generate the output expected from "techDemo.music."     



